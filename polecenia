which ls - ktore ls jest wykonywane (z PATH)
whereis ls - gdzie sa wszystkie ls

help CMD lub man lub info

# komentarz

; koniec polecenia - wszytskie polecenia sie wykonaja, bez wzgledu na rezultat poprzednida

: pusta instrukcja (zawsze zwraca wartosc True)
	np while : ; do echo plik ; done

. ./filename - wykonuje polecenie w biezacej powloce (bashu)
	- zachowuje zmienne zewnetrzne (dodaje)
	- nie potrzeba chmod +x (kropka dziala jak include)
deskryptory plikowe
	-0 - strumien wejsciowy
	-1 - wyjsciowy
	-2 err

przekierowania wyjscia
	-ls -al 1>ls.log - przekieruj wyjscie do log -skasuje plik
	-ls -al > ls.log - przekieruj calosc do log
	-echo dopisuj >> l.log - do dopisywania
	-ping -c 1 google.com > >( cat) - tak tez mozna przekierowac wyjscie
				^inny operator. bardziej czytelne > >( tail -1)

... > ping.log 2>&1 - &1 oznacza ping.log
... 2> /dev/null > ping.log  - oczysc wynik z bledow

przekierowanie wejscia:
more 0<ping.log
more < ping.log (0 domyslne)
more <(ping google.com) - PRZYDATNE <(CMD) przekierowanie dekr.wyjsc - mozna uzywac kilku

kopiowanie deskryptorow
	Po lewej docelowy, po prawej zrodlo
	n<&x lub n>&x kopiuje dek=sk x do n
	KOLEJNOSC MA ZNACZENIE
	&> lub >& == > plik 2>&1

zamkniecie deskryptora numer n
	n>&- lub n<&-
przeniesienie i zamkniecie zrodlowego:
	n<&x- lub n>&x- kopiuje x do n i zamyka x

otwarcie pliku do zapisu i odczytu:
	n<> plik
	gdy nie ma n, uzywane jest dom 0
	istniejacy plik nie jest przycinany

POTOKI:
	operator |
	laczy wyjscie pierw. procesu z wejscie 2 procesu
	oba procesy dzialaja rownoczesnie
	np:
		$ls | grep wzorzec
		$du -csh | sort -h

Uruchomienie procesu w tle
	-& na koncu polecenia
	echo $! - PID ostatnio uruchomionego polecenia
	sprawdzenie PID: top, ps, (jobs)
	zakonczenie: kill %1 (kill %job_id)
	fg przywrocenie na pierwszy plan
	ctrl+z - stop

			ZMIENNE
-tworzone przy pierwszym uzyciu
- niszczone przez 'unset'
	zmienna="wartosc"
	echo $zmienna
	echo "$zmienna" - wypisze zmienna
	echo '$zmienna - wypisze zmienna
	echo /$zmienna --> na wyjsciu $zmienna
	read zmienna - zapisuje z wejscia do zmiennej
	echo $(zmienna) - zalecany sposob

export zmienna -> exportuje zmienna do uzytku przez inne zadania (z tej samej powloki?)

zmienne systemowe.. 
	$HOME
	$PATH
	$0 - nazwa skryptu powloki
	$$ - PID biezacego procesu powloki
	$# liczba przekazanych parametrow

zmienne paramteryczne - paramatry przekazane do pliku
	tylko odczyt wartosci
	$1, $2, $3 itd
	$*, $@ - lista wszystkich parametrow
	$@= "$1""$2" - obejmuje parametr ""
	

cwiczenia z ifs	i zmiennymi

instrukcja shift - przesuwa zmienne parametryczne o podana ilosc pozycji w dol
	$# $* $@ sa rowniez zmieniane

	echo "$#; $1"  liczba, param
	shift
	echo "$# ; $1"	liczba-1 param+1
	./shift.sh ala ma kota

polecenie set:
	ustawia zmienne parametryczne dla biezacej powloki
	set $(date +%A)
	echo $1

rozwiniecia parametryczne
	zm="ala ma kota"
	echo ${zm:4:2} --> 'ma'

	echo ${zm /ma nie ma} -> zamienia?

	${param:-domyslna} - jesli param==null zwraca wart. dom, ale nie przypisuje
	${#param} - dlugosc paramteru w znakach
	${param%slowo} - usuwa od konca najmniejsza czesc pasujaca do slowo
	${param%%slowo} - usuwa najdluzsze od konca dopasowanie
	... cd usuwania

* oznacza jeden lub wiecej znakow
	
	zmienna=/dzo/fwe/efw/fwe/de
	echo ${zmienna%fwe*} - usunie fwe/de

	echo ${zmienna%%fwe*}	usunie fwe/ewf/fwe/de
	echo ${zmienna##fwe*}
	
	para.sh - wyluskanie nazwy pliku/ sciezki

				TABLICE
	indeksowana/asocjacyjna
	nie ma ograniczen rozmiaru
	indeks od 0

	INDEksowana:
	tablica= (pierwszy drugi trzeci)
	
	aso:
	declare -A tablica_a=([pierwszy]=a [drugi]=b [trzeci]=c)

	echo ${#tablica[*]} - ilosc elemntow w tablicy

	echo ${tablica[0]} - pobranie elementu
	echo ${tablica_a[drugi]} - aso
	
	wszystkie elementy tablicy:
	echo ${tablica [@]} ${tablica[*]}

	lista kluczy tablicy asocjacyjnej:
	echo ${!tablica_a[*]} ${tablica_a[@]}
	
	dlugosc e. trzeciego:
	echo ${#tablica[3]}

	nadpisanie lub dodanie elementow:
	tablica[3]=czwarty
	tablica_a[drugi]=3
	
	usuniecie wartosci el. drugiego - liczba el sie zmniejszy, ale indeksy sie nie zmienia
	unset tablica[1]

	usuniecie tablicy:
	unset tablica
 	unset tablica[*]

	array.sh - wypisywanie el. tablicy, iterujac po indeksach
	
	array_asoc.sh - wypisywanie tablicy asocjacyjnej, z usunieciem elementu
	
			INSTRUKCJE WARUNKOWE

	IF:
	
	if warunek
	then
		instr
	else
		instr
	fi
	
	if true
	then
		echo prawda
	fi

	if !false   # ! neguje
	then
		echo prawda

	IF + ELIF

	if warunek
	then
		inst
	elif warunek
	then
		instr
	else
		instr
	fi

	instrukcje if mozna zagniezdzac

	CASE

	obsluguje takie same symbole wieloznaczne jak ls przy wyszukiwaniu plikow
	
#wtf wzorzec
	case zmienna in
	wzorzec ([wzorzec)
	instr ;;
	wzorzec ([ wz] )
	instr ;;
	esac

	np:
	echo PADA deszcz?
	read odp
	case "$odp" in
	tak)
		echo ":/";;

	*)
		echo nie rozumiem

	"tak"|'t"|"TAK") - przykladowy case
	n*|N*
	*)
	[tT]|[tT][aA][kK] - cala klasa znakow, np TaK
	
		SELECT
	-proste menu

	select zmienna in lista
	do
		polecenie
	done
	
	echo pada deszcz?
	select odp in Tak Nie
	do
		exho $odp
	done

	np:

	PS3="wybierz opcje:"
	echo ktory dzien?
	opcje="Pon Wt St Cz Pt"
	select odp in opcje
	do
		echo $odp
	done

		TEST
	-testowanie roznych warunkow
	- umieszczenie [] zwieksza przejrzystosc
	
	test z plikami:
	-f true gdy zwykly plik
	-e true if exist
	-d true if dir
	-s true if exist  rozm>0
	-x execute
	
	test i operacje arytm:
	wyrU -eq wyrT - rowne
	wyrU -ne wyrT nie
	...

	komenda [[ wyrazenie ]]
	- nowsza wersja test lub [wyrazenie] ale niezgodna z POSIX
	- zwraca 0 lub 1
	- obsluguje wyr regularne
	
	automatycznie rozwijane sa stale zapisane w innych systemach liczb
	np:
	dec=15
	hex=0x0f
	
	if [["$dec" -eq "$hex"]]
	then
		echo rowne
	else
		echo rozne
	fi

	
		STRUKTURY STERUJACE

	FOR
	for zmienna in lista_ciagow
	do
		instr
	done

	postac z rozwinieciem wyrazen arytm
	for (( expr1; expr2; expr3  )) #expr1 - przed 1 petla, expr2 - w trakcie?
	do
		instr
	done
	
	echo {a..z} ==a,b,..y,z

	for ((i=0; i<10; i++))
	do
		instr
	done
	
	WHILE

	counter=1
	while ["$counter" -lt 5]
	do
		echo $counter
		let counter++
	done
	echo $counter

	#lub
	ls -l | while read f #while jako pod-powloka
	do
	echo Plik $f
	done

	UNTIL
	until warunek
	do
		instr
	done
	counter=1
	
	until ["$counter" -gt 5]
	...
	
	break -wyjscie z petli
	continue - przerwij to wykonanie i przejdz do nastepnego
	
	&& - and- if [] && []; then if [[ && ]]; then
	|| - or - -==--

	BLOKI INSTRUKCJI
	{...} - w biezacej powloce
	[...] - w nowej powloce
	
	if [-f plik] && {grep -Hn "a" plik; echo druga} #drugie wyr zawsze prawdziwe
	then
		echo Znalazlem \"a\"?
	fi
	
				FUNKCJE
	-wykonuja sie szybciej
	-trzeba je najpierw zdefiniowac
	-latwiej przekazac rezultaty
	

	func() {
	 echo "Wykonalo sie"
	}
	echo Start
	func
	echo Koniec
	
	#tutaj funkcja z case
	while func
	do
		echo jeszcze raz
	done

	#funkcja z parametrami func_para.sh

	zmienne lokalne w funkcji
	func(){
	local lokalna=
	
	func(){
	read wej
	echo $wej
	}

			DOKUMENTY MIEJSCOWE
	zaczyna sie od <<, po ktorym nastepuje unikalna sekwencja, ktora musi zostac powtorzona na koncu pliku
	
	cat << _EOF_
	Dokument miejscowy
	_EOF_

	test2.sh - dla -h- opcje, itd - dokonczyc

		SEKWENCJE SPECJALNE

	\\ - odwrocony ukosnik
	\" - cudzyslow
	\n - nowa linia
	\t - tabulator
	
	printf
	printf format paramtery
	np
	printf "%s\n%s\n" ciag1 ciag2

	exec - zastepuje biezaca powloke innym poleceniem
	exec ls -l
	przydatne do przekierowan wyjsc
	exec 1>log

	exit n -konczy skrypt z kodem n

	eval - wykonuje dodatkowe rozwiniecia parametrow
	umozliwia pisanie dynamicznego kodu
	x=foo ; y=\$$x; echo $y;
	>$foo	
	foo=10; x=foo; eval y=\$$x; echo $y
	>10
	
	sleep - pauza na okreslona liczbe sekund
	time sleep 1m
	
	STOS katalogow
	pushd 
	popd - zdejmij i wejdz do katalogu
	dirs - lista katalogow na stosie
	
	TRAP
	debugowanie
	


	DEBUGOWANIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

	(numer lini nie zawsze odpowaiada miejscu wystapienia bledu)
	(przyklad) line_err.sh

	debug_printf.sh - ciekawy kod, wyrzuca trace bledu

	polecenie set i opcje
	set -n - szuka tylko bledow skladni
	set -v - sprawdza przed wykonaniem (?)
	set -x - sprawdza po przypisaniu zmiennych
	set -u - err gdy undefined
	set -e - zakoncz skrypt gdy polecenie zwroci niezerowy kod wyjscia

	polecenie trap
	po dodaniu do skryptu wyrzuca podany komunikat.
	EXIT - pulapka wykonywana w momencie konczenia pracy skryptu
	np. trap 'echo kryt. wartosc = $zmienna' EXIT
	
	RETURN - gdy funkcja lub zalaczony skrypt zakonczy dzialanie
	np . config.sh

	set -0 functrace  - powoduje dziedziczenie pulapek RETURN oraz DEBUG przez funkcje i polecenia w podpowlokach
	
	DEBUG
	pulapka wykonywana przed wykoaniem kolejnej instrukcji
	trap 'echo $LINENO ${FUNCNAME[0]}' DEBUG

	ERR
	wykonywana gdy kod wyjscia jest rozny od 0 (z bledem). Nie wykonywane gdy polecenie uzyte w instr. war.
	
	set -0 errtrace  - wlacza dziedziczenie pulapki err przez funkcji i podpowloki
	
	POLECENIE tee
	czyta wejscie i przesyla na wyjscie zapisujac tez dane do pliku
	np ls | sort | tee log.txt
	
	debug_tee.sh

	cw
	stworz f. assert like:
	assert "warunek" $LINENO
	skrypt zawierajacy f. assert
		+ set -x aby sledzic wykonywanie
		+ przy pomocy zmiennej BASH_XTRACEFD przekieruje komunikaty sledzenia do pliku
		+ wykorzysta pulapke DEBUG

	assert.sh - prosta asercja z debugiem do pliku
	


		ROZWINIECIA ARYTMETYCZNE

	-czyli wykonywanie dzialan arytm
	-tylko liczby calkowite
	
			WYKLAD/SLAJDY

	expr1?expr2:expr3 <--- skrot if . jesli expr1 to expr2 jesli nie to expr3
	
	

	PROSTE WCORCE
	cw1
	a - echo */
	b - echo cr*
	c - echo *[ab]*/ 
	d - echo *[ab]*[ab]*/ - nie bo aa bb
	d - echo *a*b*/ *b*a*/
		lub uzywajac listy wzorcow
	 - echo *+(a|b)* *a* *b*

	+(a|b)* == a*b*
	*?(a)* == moze ale nie musi byc a w napisie

	listy wzorcow, przyklady.

	cw:
	a - echo *!(a)*.jpg == echo +(^a)*.jpg
	b - echo !(*.bmp|*.sh) - nie *!() - null na koncu nazwy
	
			PRZETWARZANIE TEKSTU

	expand/unexpand - zamienia spacje na tabulatory i odwrotnie

	tr - podmien lub skasuj okreslone znaki

	paste - laczy wiele lini w jedna
	
	sort - sortowanie

	uniq - pomin zduplikowane linie, ktore do siebie przylegaja
	
	sort:
	a) ps -A --no-heading -o rss | paste -sd '+' | bc
	b) ps aux | sort -nk6  - prawie
	
	
			REG-EXP
	
	zazwyczaj slaba dokumentacja
	moga byc trudne do czytania
	
	jex.im/regulex  <-- wizualizacja

	grep - przeszukiwanie plikow tekstowych
	
	echo abc | grep ab -znajduje
	
	podstawowe vs rozszerzane regexp:
	bez przelacznika -E meta-znaki ?,+,{,|,(,) nie posiadaja specjalnego znaczenia
	trzeba je poprzedzic znakiem \ (backslash)
	
	poczatek i koniec dopasowywanego wiersza:
	^ poczatek
	$ koniec linii
	
	echo abc | grep ^a - linia zaczynajaca sie na a
	echo abc | grep a$ - linia konczaca sie na a

	egrep = grep -E
	
	-klasy znakow
	[]
	[0-9] [a-z]	

	
	echo "<h7" | egrep "<[Hh][1-7]>"

	
	. - dowolny znak
	przyklad dla daty: 11-01-01, 11/01/01, 11.01.01, 11,01,01
	11[-./]01[-./]01

	alternacja: laczenie wielu klas

	echo "Echo" | egrep 'echo|Echo'

	() - ograniczaja zasieg alternacji

	echo "echo" | egrep '(e|E|C)cho'
	[Aa]leje Jana Pawla (2|II)
	[Uu]lica (Trzecie|3-)go Maja

	granice slow:
	\< poczatek slowa
	\> koniec slowa

	przyklad dla "Ten tego tamt-ego"
	\<tego\>
	\<tamt\>
	\<50\>
	\<(tego|ego)\>

	elementy opcjonalne:
	? - umieszczamy po znaku, ktory moze, ale nie musi wystapic - zero lub jeden
	np. ro?uter r(oa)?uter - ruter lub roauter! - dot nawiasu
	
	* - zero lub wiecej (dot poprzedniego elementu)
	+ - jeden lub wiecej znakow

	Minimalna i maksymalna liczba wystapien (kwantyfikator przedzialu)
	{min,max}
	{0,1} jednoznaczne ze znakiem zapytania == ?
	echo "abbc" | egrep 'a(ab)....
	
	odwolania wsteczne
	- ograniczaja zasieg alternatywy |
	np. wyszukanie podwojonych slow w "dwa razy razy"
	\<razy +razy\>
	\<([A-Za-z]+) +\1 \> nawias kw jeden raz lub wiecej,
		+\1 - musi sie znajdowac w dalszej czesci co najmniej jeden raz
	echo "dwa razy razy razy dwa" | egrep '\<([A-Za-z]+) +\1\>'

	zachlannosc kwantyfikatorow
	polega na tym, ze zawsze staraja sie dopasowac najwieksza


	sed - zaawansowany grep?
	echo echo | sed '/e(c|h)o/ p' --> echo

	echo echo | sed -n '/s.*\(ch\).*/\1/p' --> ch zamiast / mozna #

	"data 2010"
	echo "data 2010" | sed 's/[0-9]\+//'
	echo "data 2010" | sed 's/\(.*\)\(.*\)/\1:\2/'

	"<tag>tekst</tag><tag>opis</tag>

	wyluskac "komunikat" z:
	[2017-01-01] komunikat XX

	echo "[2017-01-01] komunikat XX" | sed -n 's/\[[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\] *//p'
	^ komunikat XX

	echo "[2017-01-01] komunikat XX" | sed -n 's#^[^ ]\+ \+\(.*\) XX.*#\1#p'
	^komunikat
